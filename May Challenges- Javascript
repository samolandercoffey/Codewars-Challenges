//02/05:
In this kata you will create a function that takes in a list and returns a list with the reverse order.

Examples (Input -> Output)
* [1, 2, 3, 4]  -> [4, 3, 2, 1]
* [9, 2, 0, 7]  -> [7, 0, 2, 9]

//solution: 

function reverseList(list) {
  return list.reverse();
}
//passed FT

// 3/5:

//Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.

//The output should be two capital letters with a dot separating them.

//It should look like this:

// Sam Harris => S.H

//patrick feeney => P.F
//solution: 

function abbrevName(name){

  var nameArray = name.split(" ");
  return (nameArray[0][0] + "." + nameArray[1][0]).toUpperCase();
}

//04/05

//remove mark from end of string: 

function remove(s){
  return s.replace( /!$/, '') 
}

//5/5
//Consider an array/list of sheep where some sheep may be missing from their place. We need a function that counts the number of sheep present in the array (true means present).

function countSheeps(arrayOfSheeps) {
  return arrayOfSheeps.filter(Boolean).length;
}

//f we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

//Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.

//Note: If the number is a multiple of both 3 and 5, only count it once.

function solution(number){
  var sum = 0;
  
  for(var i = 1;i< number; i++){
    if(i % 3 == 0 || i % 5 == 0){
      sum += i
    }
  }
  return sum;
}

//9/5

//you have to write a function that accepts three parameters:

//cap is the amount of people the bus can hold excluding the driver.
//on is the number of people on the bus excluding the driver.
//wait is the number of people waiting to get on to the bus excluding the driver.
//If there is enough space, return 0, and if there isn't, return the number of passengers he can't take.

function enough(cap, on, wait) {
  if (on + wait < cap){
  return 0;
  } else {
  return (on + wait) - cap;
  }
}
//10/5

//return Write a function to split a string and convert it into an array of words.

function array(string){
string.split(' )
}

11/5
// test if a number returns even: 
function testEven(n) {
  return n % 2 === 0 ? true : false;
}
//12/5
//replace vowels with '!'

function replace(s){
  return s.replace(/[aeoiu]/ig, '!')  
}

//16/05
//Complete the function which converts hex number (given as a string) to a decimal number.


function hexToDec(hexString){
 return  parseInt(hexString, 16);
}
//17/5

//Return letter's position in alphabet
function position(letter){
  const alphabet = 'abcdefghijklmnopqrstuvwxyz';
  return 'Position of alphabet: ' + (alphabet.indexOf(letter) + 1);
}
//18/05
const makeUpperCase = str => str.toUpperCase();

//19/05
//remove all numbers from a string: 

function stringClean(s){
  return s.replace(/\d/g, "");
}

// 22/05
//cubbed numbers in a triangle, add each row. 
function rowSumOddNumbers(n) {
	return n*n*n
}

//23/05
//Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.

////This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects (from 0 and above);

//This function should return a number (final grade). There are four types of final grades:

//100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.
//90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.
//75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.
//0, in other cases


function finalGrade (exam, projects) {
  if(exam > 90 || projects > 10) return 100;
  if(exam > 75 & projects >= 5) return 90;
  if(exam > 50 & projects >= 2) return 75;
  return 0;
}
//24/05
function sortByLength (array) {
  return array.sort((a,b) => a.length - b.length);
};

//Write a function that takes an array of strings as an argument and returns a sorted array containing the same strings, ordered from shortest to longest.

//For example, if this array were passed as an argument:

//["Telescopes", "Glasses", "Eyes", "Monocles"]

//Your function would return the following array:

//["Eyes", "Glasses", "Monocles", "Telescopes"]
